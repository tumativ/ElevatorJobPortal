
package com.elevator.interfaces.rs;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import javax.validation.constraints.NotNull;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;


/**
 * An address at which the user can be contacted.
 * 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Generated("com.googlecode.jsonschema2pojo")
@JsonPropertyOrder({
    "id",
    "address_type",
    "line1",
    "line2",
    "city",
    "state",
    "postal_code",
    "country_code",
    "additional_address_fields"
})
public class Address {

    /**
     * unique identifier for this address for this user. This value is read-only.  It is set when the address is first created and it can be changed on any modification, in which case a redirect response code would be returned.
     * (Required)
     * 
     */
    @JsonProperty("id")
    @NotNull
    private String id;
    /**
     * The type of address differentiates between the user address and other addresses related to the party we want to track
     * 
     */
    @JsonProperty("address_type")
    private String addressType;
    /**
     * Generic string for the first line of the address. This data may also be expressed at a higher resolution in more specific fields such as street_name. The format of this string is not necessarily appropriate for your locale. It is provided for backwards compatibility. You should use the globalization/localization framework to get the proper local formating of this address.
     * (Required)
     * 
     */
    @JsonProperty("line1")
    @NotNull
    private String line1;
    /**
     * Generic string for the optional, second line of address text. This data may also be expressed at a higher resolution in more specific fields. The format of this string is not necessarily appropriate for your locale. It is provided for backwards compatibility. You should use the globalization/localization framework to get the proper local formating of this address.
     * 
     */
    @JsonProperty("line2")
    private String line2;
    /**
     * The city field of the address.
     * (Required)
     * 
     */
    @JsonProperty("city")
    @NotNull
    private String city;
    /**
     * If the address has a state this is it (not all localities have state designations in their addresses). Length could be limited by locale; for example, US state codes are only 2 letters. However, we do not enforce or require this restriction.
     * 
     */
    @JsonProperty("state")
    private String state;
    /**
     * Also known as a 'zip code' in the US. Use depends on the country of the address. Different countries use different postal codes and some don't have one at all. We have some validation logic for postal codes of some countries, but no validation is enforced by us. At most we will mark the address as invalid if we are sure that the postal code is illegal.
     * 
     */
    @JsonProperty("postal_code")
    private String postalCode;
    /**
     *  2 character ISO country code for the address
     * (Required)
     * 
     */
    @JsonProperty("country_code")
    @NotNull
    private String countryCode;
    /**
     * Other fields used in the address. These values are typically generated by the Globalization engine. The field names cannot be repeated and cannot be the properties already defined above. There is a defined set of allowed field names.
     * 
     */
    @JsonProperty("additional_address_fields")
    private List<String> additionalAddressFields = new ArrayList<String>();
    private Map<String, Object> additionalProperties = new HashMap<String, Object>();

    /**
     * unique identifier for this address for this user. This value is read-only.  It is set when the address is first created and it can be changed on any modification, in which case a redirect response code would be returned.
     * (Required)
     * 
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * unique identifier for this address for this user. This value is read-only.  It is set when the address is first created and it can be changed on any modification, in which case a redirect response code would be returned.
     * (Required)
     * 
     */
    @JsonProperty("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * The type of address differentiates between the user address and other addresses related to the party we want to track
     * 
     */
    @JsonProperty("address_type")
    public String getAddressType() {
        return addressType;
    }

    /**
     * The type of address differentiates between the user address and other addresses related to the party we want to track
     * 
     */
    @JsonProperty("address_type")
    public void setAddressType(String addressType) {
        this.addressType = addressType;
    }

    /**
     * Generic string for the first line of the address. This data may also be expressed at a higher resolution in more specific fields such as street_name. The format of this string is not necessarily appropriate for your locale. It is provided for backwards compatibility. You should use the globalization/localization framework to get the proper local formating of this address.
     * (Required)
     * 
     */
    @JsonProperty("line1")
    public String getLine1() {
        return line1;
    }

    /**
     * Generic string for the first line of the address. This data may also be expressed at a higher resolution in more specific fields such as street_name. The format of this string is not necessarily appropriate for your locale. It is provided for backwards compatibility. You should use the globalization/localization framework to get the proper local formating of this address.
     * (Required)
     * 
     */
    @JsonProperty("line1")
    public void setLine1(String line1) {
        this.line1 = line1;
    }

    /**
     * Generic string for the optional, second line of address text. This data may also be expressed at a higher resolution in more specific fields. The format of this string is not necessarily appropriate for your locale. It is provided for backwards compatibility. You should use the globalization/localization framework to get the proper local formating of this address.
     * 
     */
    @JsonProperty("line2")
    public String getLine2() {
        return line2;
    }

    /**
     * Generic string for the optional, second line of address text. This data may also be expressed at a higher resolution in more specific fields. The format of this string is not necessarily appropriate for your locale. It is provided for backwards compatibility. You should use the globalization/localization framework to get the proper local formating of this address.
     * 
     */
    @JsonProperty("line2")
    public void setLine2(String line2) {
        this.line2 = line2;
    }

    /**
     * The city field of the address.
     * (Required)
     * 
     */
    @JsonProperty("city")
    public String getCity() {
        return city;
    }

    /**
     * The city field of the address.
     * (Required)
     * 
     */
    @JsonProperty("city")
    public void setCity(String city) {
        this.city = city;
    }

    /**
     * If the address has a state this is it (not all localities have state designations in their addresses). Length could be limited by locale; for example, US state codes are only 2 letters. However, we do not enforce or require this restriction.
     * 
     */
    @JsonProperty("state")
    public String getState() {
        return state;
    }

    /**
     * If the address has a state this is it (not all localities have state designations in their addresses). Length could be limited by locale; for example, US state codes are only 2 letters. However, we do not enforce or require this restriction.
     * 
     */
    @JsonProperty("state")
    public void setState(String state) {
        this.state = state;
    }

    /**
     * Also known as a 'zip code' in the US. Use depends on the country of the address. Different countries use different postal codes and some don't have one at all. We have some validation logic for postal codes of some countries, but no validation is enforced by us. At most we will mark the address as invalid if we are sure that the postal code is illegal.
     * 
     */
    @JsonProperty("postal_code")
    public String getPostalCode() {
        return postalCode;
    }

    /**
     * Also known as a 'zip code' in the US. Use depends on the country of the address. Different countries use different postal codes and some don't have one at all. We have some validation logic for postal codes of some countries, but no validation is enforced by us. At most we will mark the address as invalid if we are sure that the postal code is illegal.
     * 
     */
    @JsonProperty("postal_code")
    public void setPostalCode(String postalCode) {
        this.postalCode = postalCode;
    }

    /**
     *  2 character ISO country code for the address
     * (Required)
     * 
     */
    @JsonProperty("country_code")
    public String getCountryCode() {
        return countryCode;
    }

    /**
     *  2 character ISO country code for the address
     * (Required)
     * 
     */
    @JsonProperty("country_code")
    public void setCountryCode(String countryCode) {
        this.countryCode = countryCode;
    }

    /**
     * Other fields used in the address. These values are typically generated by the Globalization engine. The field names cannot be repeated and cannot be the properties already defined above. There is a defined set of allowed field names.
     * 
     */
    @JsonProperty("additional_address_fields")
    public List<String> getAdditionalAddressFields() {
        return additionalAddressFields;
    }

    /**
     * Other fields used in the address. These values are typically generated by the Globalization engine. The field names cannot be repeated and cannot be the properties already defined above. There is a defined set of allowed field names.
     * 
     */
    @JsonProperty("additional_address_fields")
    public void setAdditionalAddressFields(List<String> additionalAddressFields) {
        this.additionalAddressFields = additionalAddressFields;
    }

    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    @Override
    public int hashCode() {
        return HashCodeBuilder.reflectionHashCode(this);
    }

    @Override
    public boolean equals(Object other) {
        return EqualsBuilder.reflectionEquals(this, other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    @JsonAnySetter
    public void setAdditionalProperties(String name, Object value) {
        this.additionalProperties.put(name, value);
    }

}
